{"ast":null,"code":"import { isSortingPaused } from './controls/pause-button';\nexport function init(array, colors, size, height) {\n  for (let i = 0; i < size; i++) {\n    array[i] = Math.floor(Math.random() * (height - 100 + 1)) + 100;\n    colors[i] = 0;\n  }\n}\nexport async function swap(array, index1, index2, ms) {\n  await sleep(ms);\n  const temp = array[index1];\n  array[index1] = array[index2];\n  array[index2] = temp;\n}\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport async function stop() {\n  while (isSortingPaused) await sleep(0);\n}","map":{"version":3,"sources":["/home/nman/Documents/v5.2/src/components/utilities.js"],"names":["isSortingPaused","init","array","colors","size","height","i","Math","floor","random","swap","index1","index2","ms","sleep","temp","Promise","resolve","setTimeout","stop"],"mappings":"AAAA,SAASA,eAAT,QAAgC,yBAAhC;AAEA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2C;AAC9C,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,EAA3B,EAA+B;AAC3BJ,IAAAA,KAAK,CAACI,CAAD,CAAL,GAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,MAAM,GAAG,GAAT,GAAe,CAAhC,CAAX,IAAiD,GAA5D;AACAF,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAY,CAAZ;AACH;AACJ;AAED,OAAO,eAAeI,IAAf,CAAoBR,KAApB,EAA2BS,MAA3B,EAAmCC,MAAnC,EAA2CC,EAA3C,EAA+C;AAClD,QAAMC,KAAK,CAACD,EAAD,CAAX;AACA,QAAME,IAAI,GAAGb,KAAK,CAACS,MAAD,CAAlB;AACAT,EAAAA,KAAK,CAACS,MAAD,CAAL,GAAgBT,KAAK,CAACU,MAAD,CAArB;AACAV,EAAAA,KAAK,CAACU,MAAD,CAAL,GAAgBG,IAAhB;AACH;AAED,OAAO,SAASD,KAAT,CAAeD,EAAf,EAAmB;AACtB,SAAO,IAAIG,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUJ,EAAV,CAAjC,CAAP;AACH;AAED,OAAO,eAAeM,IAAf,GAAsB;AACzB,SAAOnB,eAAP,EACI,MAAMc,KAAK,CAAC,CAAD,CAAX;AACP","sourcesContent":["import { isSortingPaused } from './controls/pause-button';\n\nexport function init(array, colors, size, height) {\n    for (let i = 0; i < size; i++) {\n        array[i] = Math.floor(Math.random() * (height - 100 + 1)) + 100;\n        colors[i] = 0;\n    }\n}\n\nexport async function swap(array, index1, index2, ms) {\n    await sleep(ms);\n    const temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}\n\nexport function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport async function stop() {\n    while (isSortingPaused)\n        await sleep(0);\n}\n"]},"metadata":{},"sourceType":"module"}