{"ast":null,"code":"import { stop, swap } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/menu\";\n\nconst findMax = (nums, k) => {\n  let max = -Infinity;\n  let maxIndex = 0;\n\n  for (let i = 0; i < k; i++) {\n    if (nums[i] >= max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n\n  return maxIndex;\n};\n\nconst flip = async (nums, k, ms) => {\n  let i = 0;\n\n  while (i < k) {\n    await stop();\n    await swap(nums, k, i, ms);\n    i++;\n    k--;\n  }\n\n  return nums;\n};\n\nexport default async function pancake(values, colors, size, ms) {\n  let n = size;\n\n  while (n > 1) {\n    if (isArrayReset) {\n      colors.fill(0);\n      return;\n    }\n\n    colors[n] = 2;\n    let maxIndex = findMax(values, n);\n\n    if (maxIndex !== n - 1) {\n      await flip(values, maxIndex, ms);\n      await flip(values, n - 1, ms);\n    }\n\n    n--;\n  }\n\n  colors.fill(2);\n  return values;\n}","map":{"version":3,"sources":["/home/nman/Documents/SortAlgoWebsite/src/sorting-algorithms/pancake.js"],"names":["stop","swap","isArrayReset","findMax","nums","k","max","Infinity","maxIndex","i","flip","ms","pancake","values","colors","size","n","fill"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,yBAA3B;AACA,SAASC,YAAT,QAA6B,oBAA7B;;AAGA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,CAAP,KAAa;AACzB,MAAIC,GAAG,GAAG,CAACC,QAAX;AACA,MAAIC,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AACxB,QAAIL,IAAI,CAACK,CAAD,CAAJ,IAAWH,GAAf,EAAoB;AAChBA,MAAAA,GAAG,GAAGF,IAAI,CAACK,CAAD,CAAV;AACAD,MAAAA,QAAQ,GAAGC,CAAX;AACH;AACJ;;AACD,SAAOD,QAAP;AACH,CAVD;;AAYA,MAAME,IAAI,GAAG,OAAON,IAAP,EAAaC,CAAb,EAAgBM,EAAhB,KAAuB;AAChC,MAAIF,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGJ,CAAX,EAAc;AACV,UAAML,IAAI,EAAV;AACA,UAAMC,IAAI,CAACG,IAAD,EAAOC,CAAP,EAAUI,CAAV,EAAaE,EAAb,CAAV;AACAF,IAAAA,CAAC;AACDJ,IAAAA,CAAC;AACJ;;AACD,SAAOD,IAAP;AACH,CATD;;AAWA,eAAe,eAAeQ,OAAf,CAAuBC,MAAvB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CJ,EAA5C,EAAgD;AAC3D,MAAIK,CAAC,GAAGD,IAAR;;AACA,SAAOC,CAAC,GAAG,CAAX,EAAc;AACV,QAAId,YAAJ,EACA;AACIY,MAAAA,MAAM,CAACG,IAAP,CAAY,CAAZ;AACA;AACH;;AACDH,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAY,CAAZ;AACA,QAAIR,QAAQ,GAAGL,OAAO,CAACU,MAAD,EAASG,CAAT,CAAtB;;AACA,QAAIR,QAAQ,KAAKQ,CAAC,GAAG,CAArB,EAAwB;AACpB,YAAMN,IAAI,CAACG,MAAD,EAASL,QAAT,EAAmBG,EAAnB,CAAV;AACA,YAAMD,IAAI,CAACG,MAAD,EAASG,CAAC,GAAG,CAAb,EAAgBL,EAAhB,CAAV;AACH;;AACDK,IAAAA,CAAC;AACJ;;AACDF,EAAAA,MAAM,CAACG,IAAP,CAAY,CAAZ;AACA,SAAOJ,MAAP;AACH","sourcesContent":["import { stop, swap } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/menu\";\n\n\nconst findMax = (nums, k) => {\n    let max = -Infinity;\n    let maxIndex = 0;\n    for (let i = 0; i < k; i++) {\n        if (nums[i] >= max) {\n            max = nums[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst flip = async (nums, k, ms) => {\n    let i = 0;\n    while (i < k) {\n        await stop();\n        await swap(nums, k, i, ms);\n        i++;\n        k--;\n    }\n    return nums;\n}\n\nexport default async function pancake(values,colors, size, ms) {\n    let n = size;\n    while (n > 1) {\n        if (isArrayReset)\n        {\n            colors.fill(0);\n            return;\n        }\n        colors[n] = 2;\n        let maxIndex = findMax(values, n);\n        if (maxIndex !== n - 1) {\n            await flip(values, maxIndex, ms);\n            await flip(values, n - 1, ms);\n        }\n        n--;\n    }\n    colors.fill(2);\n    return values;\n}"]},"metadata":{},"sourceType":"module"}