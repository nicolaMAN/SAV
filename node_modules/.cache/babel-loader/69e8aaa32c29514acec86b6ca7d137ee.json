{"ast":null,"code":"import { stop, swap } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/controlMenu\";\nexport default async function selection(values, colors, size, ms) {\n  let minIndex;\n\n  for (let i = 0; i < size - 1; i++) {\n    minIndex = i;\n    colors[i] = 1;\n\n    for (let j = i + 1; j < size; j++) {\n      await stop();\n      if (values[j] < values[minIndex]) minIndex = j;\n      colors[j] = 0;\n    }\n\n    if (isArrayReset) {\n      colors.fill(0);\n      return;\n    }\n\n    await swap(values, i, minIndex, ms);\n    colors[i] = 2;\n  }\n\n  colors.fill(2);\n  return values;\n}","map":{"version":3,"sources":["/home/nman/Documents/v5.2/src/sorting-algorithms/selection.js"],"names":["stop","swap","isArrayReset","selection","values","colors","size","ms","minIndex","i","j","fill"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,yBAA3B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAGA,eAAe,eAAeC,SAAf,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,IAAzC,EAA+CC,EAA/C,EAAmD;AAC9D,MAAIC,QAAJ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,GAAG,CAA3B,EAA8BG,CAAC,EAA/B,EAAmC;AAC/BD,IAAAA,QAAQ,GAAGC,CAAX;AACAJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAY,CAAZ;;AACA,SAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAjB,EAAoBC,CAAC,GAAGJ,IAAxB,EAA8BI,CAAC,EAA/B,EAAmC;AAC/B,YAAMV,IAAI,EAAV;AACA,UAAII,MAAM,CAACM,CAAD,CAAN,GAAYN,MAAM,CAACI,QAAD,CAAtB,EACIA,QAAQ,GAAGE,CAAX;AACJL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAY,CAAZ;AACH;;AACD,QAAIR,YAAJ,EACA;AACIG,MAAAA,MAAM,CAACM,IAAP,CAAY,CAAZ;AACA;AACH;;AACD,UAAMV,IAAI,CAACG,MAAD,EAASK,CAAT,EAAYD,QAAZ,EAAsBD,EAAtB,CAAV;AACAF,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAY,CAAZ;AACH;;AACDJ,EAAAA,MAAM,CAACM,IAAP,CAAY,CAAZ;AACA,SAAOP,MAAP;AACH","sourcesContent":["import { stop, swap } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/controlMenu\";\n\n\nexport default async function selection(values, colors, size, ms) {\n    let minIndex;\n    for (let i = 0; i < size - 1; i++) {\n        minIndex = i;\n        colors[i] = 1;\n        for (let j = i + 1; j < size; j++) {\n            await stop();\n            if (values[j] < values[minIndex])\n                minIndex = j;\n            colors[j] = 0;\n        }\n        if (isArrayReset)\n        {\n            colors.fill(0);\n            return;\n        }\n        await swap(values, i, minIndex, ms);\n        colors[i] = 2;\n    }\n    colors.fill(2);\n    return values;\n}\n"]},"metadata":{},"sourceType":"module"}