{"ast":null,"code":"import { stop, swap } from \"../utilities\";\nimport { isArrayReset } from \"../components/buttonSet\";\nexport default async function bubblesort(values, colorStates, size, ms) {\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size - 1 - i; j++) {\n      if (isArrayReset) return;\n      colorStates[j] = 2;\n      await stop();\n\n      if (values[j] > values[j + 1]) {\n        await swap(values, j, j + 1, ms);\n      }\n\n      new Promise(resolve => {\n        colorStates[j + 1] = 1;\n        colorStates[j] = 0;\n      });\n    }\n  }\n\n  return values;\n}","map":{"version":3,"sources":["/home/nman/Documents/v5.2/src/sorting-algorithms/bubblesort.js"],"names":["stop","swap","isArrayReset","bubblesort","values","colorStates","size","ms","i","j","Promise","resolve"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AAEA,eAAe,eAAeC,UAAf,CAA0BC,MAA1B,EAAkCC,WAAlC,EAA+CC,IAA/C,EAAqDC,EAArD,EAAyD;AACpE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,EAA3B,EAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,GAAG,CAAP,GAAWE,CAA/B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,UAAIP,YAAJ,EACI;AACJG,MAAAA,WAAW,CAACI,CAAD,CAAX,GAAiB,CAAjB;AAEA,YAAMT,IAAI,EAAV;;AACA,UAAII,MAAM,CAACK,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAC,GAAG,CAAL,CAAtB,EAA+B;AAC3B,cAAMR,IAAI,CAACG,MAAD,EAASK,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBF,EAAnB,CAAV;AACH;;AACD,UAAIG,OAAJ,CAAYC,OAAO,IAAI;AACnBN,QAAAA,WAAW,CAACI,CAAC,GAAG,CAAL,CAAX,GAAqB,CAArB;AACAJ,QAAAA,WAAW,CAACI,CAAD,CAAX,GAAiB,CAAjB;AACH,OAHD;AAIH;AACJ;;AACD,SAAOL,MAAP;AACH","sourcesContent":["import { stop, swap } from \"../utilities\";\nimport { isArrayReset } from \"../components/buttonSet\";\n\nexport default async function bubblesort(values, colorStates, size, ms) {\n    for (let i = 0; i < size; i++) {\n        for (let j = 0; j < size - 1 - i; j++) {\n            if (isArrayReset)\n                return;\n            colorStates[j] = 2;\n\n            await stop();\n            if (values[j] > values[j + 1]) {\n                await swap(values, j, j + 1, ms);\n            }\n            new Promise(resolve => {\n                colorStates[j + 1] = 1;\n                colorStates[j] = 0;\n            })\n        }\n    }\n    return values;\n}\n"]},"metadata":{},"sourceType":"module"}