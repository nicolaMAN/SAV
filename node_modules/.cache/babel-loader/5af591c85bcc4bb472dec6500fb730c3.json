{"ast":null,"code":"import { isSortingPaused } from './components/buttonSet';\nexport function init(array, colorStates, size, height) {\n  colorStates.fill(0);\n\n  for (let i = 0; i < size; i++) {\n    array[i] = Math.floor(Math.random() * (height - 100 + 1)) + 100;\n  }\n}\nexport async function swap(array, index1, index2, ms) {\n  await sleep(ms);\n  const temp = array[index1];\n  array[index1] = array[index2];\n  array[index2] = temp;\n}\nexport function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport async function stop() {\n  while (isSortingPaused) await sleep(0);\n}","map":{"version":3,"sources":["/home/nman/Documents/v5.2/src/utilities.js"],"names":["isSortingPaused","init","array","colorStates","size","height","fill","i","Math","floor","random","swap","index1","index2","ms","sleep","temp","Promise","resolve","setTimeout","stop"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,wBAA9B;AAEA,OAAO,SAASC,IAAT,CAAeC,KAAf,EAAsBC,WAAtB,EAAmCC,IAAnC,EAAyCC,MAAzC,EAAiD;AACpDF,EAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;AAC3BL,IAAAA,KAAK,CAACK,CAAD,CAAL,GAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,MAAM,GAAG,GAAT,GAAe,CAAhC,CAAX,IAAiD,GAA5D;AACH;AACJ;AAED,OAAO,eAAeM,IAAf,CAAoBT,KAApB,EAA2BU,MAA3B,EAAmCC,MAAnC,EAA2CC,EAA3C,EAA+C;AAClD,QAAMC,KAAK,CAACD,EAAD,CAAX;AACA,QAAME,IAAI,GAAGd,KAAK,CAACU,MAAD,CAAlB;AACAV,EAAAA,KAAK,CAACU,MAAD,CAAL,GAAgBV,KAAK,CAACW,MAAD,CAArB;AACAX,EAAAA,KAAK,CAACW,MAAD,CAAL,GAAgBG,IAAhB;AACH;AAED,OAAO,SAASD,KAAT,CAAeD,EAAf,EAAmB;AACtB,SAAO,IAAIG,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUJ,EAAV,CAAjC,CAAP;AACH;AAED,OAAO,eAAeM,IAAf,GAAqB;AACxB,SAAMpB,eAAN,EACI,MAAMe,KAAK,CAAC,CAAD,CAAX;AACP","sourcesContent":["import {isSortingPaused} from './components/buttonSet';\n\nexport function init( array, colorStates, size, height) {\n    colorStates.fill(0);\n    for (let i = 0; i < size; i++) {\n        array[i] = Math.floor(Math.random() * (height - 100 + 1)) + 100;\n    }\n}\n\nexport async function swap(array, index1, index2, ms) {\n    await sleep(ms);\n    const temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp;\n}\n\nexport function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport async function stop(){\n    while(isSortingPaused)\n        await sleep(0);\n}\n"]},"metadata":{},"sourceType":"module"}