{"ast":null,"code":"import { sleep, stop } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/menu\";\nexport default async function insertation(values, colors, size, ms) {\n  for (let i = 1; i < size; i++) {\n    let current = values[i];\n    colors[i] = 1;\n    let j = i - 1;\n\n    if (isArrayReset) {\n      colors.fill(0);\n      return;\n    }\n\n    await stop();\n\n    while (j > -1 && current < values[j]) {\n      values[j + 1] = values[j];\n      j--;\n    }\n\n    await sleep(ms);\n    values[j + 1] = current;\n    colors[i] = 2;\n  }\n\n  colors.fill(2);\n  return values;\n}","map":{"version":3,"sources":["/home/nman/Documents/v5.2/src/sorting-algorithms/insertation.js"],"names":["sleep","stop","isArrayReset","insertation","values","colors","size","ms","i","current","j","fill"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,IAAhB,QAA4B,yBAA5B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAIA,eAAe,eAAeC,WAAf,CAA2BC,MAA3B,EAAkCC,MAAlC,EAA0CC,IAA1C,EAAgDC,EAAhD,EAAoD;AAC/D,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,EAA3B,EAA+B;AAC3B,QAAIC,OAAO,GAAGL,MAAM,CAACI,CAAD,CAApB;AACAH,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAY,CAAZ;AACA,QAAIE,CAAC,GAAGF,CAAC,GAAG,CAAZ;;AACA,QAAIN,YAAJ,EACA;AACIG,MAAAA,MAAM,CAACM,IAAP,CAAY,CAAZ;AACA;AACH;;AACD,UAAMV,IAAI,EAAV;;AACA,WAAQS,CAAC,GAAG,CAAC,CAAN,IAAaD,OAAO,GAAGL,MAAM,CAACM,CAAD,CAApC,EAA0C;AACtCN,MAAAA,MAAM,CAACM,CAAC,GAAG,CAAL,CAAN,GAAgBN,MAAM,CAACM,CAAD,CAAtB;AACAA,MAAAA,CAAC;AACJ;;AACD,UAAMV,KAAK,CAACO,EAAD,CAAX;AACAH,IAAAA,MAAM,CAACM,CAAC,GAAG,CAAL,CAAN,GAAgBD,OAAhB;AACAJ,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAY,CAAZ;AACH;;AACDH,EAAAA,MAAM,CAACM,IAAP,CAAY,CAAZ;AAEA,SAAOP,MAAP;AACH","sourcesContent":["import { sleep, stop } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/menu\";\n\n\n\nexport default async function insertation(values,colors, size, ms) {\n    for (let i = 1; i < size; i++) {\n        let current = values[i];\n        colors[i] = 1;\n        let j = i - 1;\n        if (isArrayReset)\n        {\n            colors.fill(0);\n            return;\n        }\n        await stop();\n        while ((j > -1) && (current < values[j])) {\n            values[j + 1] = values[j];\n            j--;\n        }\n        await sleep(ms);\n        values[j + 1] = current;\n        colors[i] = 2;\n    }\n    colors.fill(2);\n\n    return values;\n}"]},"metadata":{},"sourceType":"module"}