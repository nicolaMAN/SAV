{"ast":null,"code":"import _regeneratorRuntime from\"/home/nman/Documents/SortAlgoWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/nman/Documents/SortAlgoWebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{stop,swap}from\"../components/utilities\";import{isArrayReset}from\"../components/menu\";var findMax=function findMax(nums,k){var max=-Infinity;var maxIndex=0;for(var i=0;i<k;i++){if(nums[i]>=max){max=nums[i];maxIndex=i;}}return maxIndex;};var flip=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(nums,k,ms){var i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:i=0;case 1:if(!(i<k)){_context.next=10;break;}_context.next=4;return stop();case 4:_context.next=6;return swap(nums,k,i,ms);case 6:i++;k--;_context.next=1;break;case 10:return _context.abrupt(\"return\",nums);case 11:case\"end\":return _context.stop();}}},_callee);}));return function flip(_x,_x2,_x3){return _ref.apply(this,arguments);};}();export default function pancake(_x4,_x5,_x6,_x7){return _pancake.apply(this,arguments);}function _pancake(){_pancake=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values,colors,size,ms){var n,maxIndex;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:n=size;case 1:if(!(n>1)){_context2.next=15;break;}if(!isArrayReset){_context2.next=5;break;}colors.fill(0);return _context2.abrupt(\"return\");case 5:colors[n]=2;maxIndex=findMax(values,n);if(!(maxIndex!==n-1)){_context2.next=12;break;}_context2.next=10;return flip(values,maxIndex,ms);case 10:_context2.next=12;return flip(values,n-1,ms);case 12:n--;_context2.next=1;break;case 15:colors.fill(2);return _context2.abrupt(\"return\",values);case 17:case\"end\":return _context2.stop();}}},_callee2);}));return _pancake.apply(this,arguments);}","map":{"version":3,"sources":["/home/nman/Documents/SortAlgoWebsite/src/sorting-algorithms/pancake.js"],"names":["stop","swap","isArrayReset","findMax","nums","k","max","Infinity","maxIndex","i","flip","ms","pancake","values","colors","size","n","fill"],"mappings":"mTAAA,OAASA,IAAT,CAAeC,IAAf,KAA2B,yBAA3B,CACA,OAASC,YAAT,KAA6B,oBAA7B,CAGA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAOC,CAAP,CAAa,CACzB,GAAIC,CAAAA,GAAG,CAAG,CAACC,QAAX,CACA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,CAApB,CAAuBI,CAAC,EAAxB,CAA4B,CACxB,GAAIL,IAAI,CAACK,CAAD,CAAJ,EAAWH,GAAf,CAAoB,CAChBA,GAAG,CAAGF,IAAI,CAACK,CAAD,CAAV,CACAD,QAAQ,CAAGC,CAAX,CACH,CACJ,CACD,MAAOD,CAAAA,QAAP,CACH,CAVD,CAYA,GAAME,CAAAA,IAAI,0FAAG,iBAAON,IAAP,CAAaC,CAAb,CAAgBM,EAAhB,wHACLF,CADK,CACD,CADC,aAEFA,CAAC,CAAGJ,CAFF,iDAGCL,CAAAA,IAAI,EAHL,8BAICC,CAAAA,IAAI,CAACG,IAAD,CAAOC,CAAP,CAAUI,CAAV,CAAaE,EAAb,CAJL,QAKLF,CAAC,GACDJ,CAAC,GANI,8DAQFD,IARE,yDAAH,kBAAJM,CAAAA,IAAI,oDAAV,CAWA,uBAA8BE,CAAAA,OAA9B,yD,qFAAe,kBAAuBC,MAAvB,CAA8BC,MAA9B,CAAsCC,IAAtC,CAA4CJ,EAA5C,qIACPK,CADO,CACHD,IADG,aAEJC,CAAC,CAAG,CAFA,gCAGHd,YAHG,0BAKHY,MAAM,CAACG,IAAP,CAAY,CAAZ,EALG,yCAQPH,MAAM,CAACE,CAAD,CAAN,CAAY,CAAZ,CACIR,QATG,CASQL,OAAO,CAACU,MAAD,CAASG,CAAT,CATf,MAUHR,QAAQ,GAAKQ,CAAC,CAAG,CAVd,oDAWGN,CAAAA,IAAI,CAACG,MAAD,CAASL,QAAT,CAAmBG,EAAnB,CAXP,iCAYGD,CAAAA,IAAI,CAACG,MAAD,CAASG,CAAC,CAAG,CAAb,CAAgBL,EAAhB,CAZP,SAcPK,CAAC,GAdM,+BAgBXF,MAAM,CAACG,IAAP,CAAY,CAAZ,EAhBW,iCAiBJJ,MAjBI,2D","sourcesContent":["import { stop, swap } from \"../components/utilities\";\nimport { isArrayReset } from \"../components/menu\";\n\n\nconst findMax = (nums, k) => {\n    let max = -Infinity;\n    let maxIndex = 0;\n    for (let i = 0; i < k; i++) {\n        if (nums[i] >= max) {\n            max = nums[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst flip = async (nums, k, ms) => {\n    let i = 0;\n    while (i < k) {\n        await stop();\n        await swap(nums, k, i, ms);\n        i++;\n        k--;\n    }\n    return nums;\n}\n\nexport default async function pancake(values,colors, size, ms) {\n    let n = size;\n    while (n > 1) {\n        if (isArrayReset)\n        {\n            colors.fill(0);\n            return;\n        }\n        colors[n] = 2;\n        let maxIndex = findMax(values, n);\n        if (maxIndex !== n - 1) {\n            await flip(values, maxIndex, ms);\n            await flip(values, n - 1, ms);\n        }\n        n--;\n    }\n    colors.fill(2);\n    return values;\n}"]},"metadata":{},"sourceType":"module"}